C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/26/2025 17:55:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\Keyboard.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil_C51_v9.61\C51\BIN\C51.EXE USB\Device\Keyboard.C OPTIMIZE(8,SPEED) BROWS
                    -E DEBUG OBJECTEXTEND PRINT(.\Listings\Keyboard.lst) TABS(2) OBJECT(.\Objects\Keyboard.obj)

line level    source

   1          #include "./Public/CH552.H"                                                     
   2          #include "./Public/DEBUG.H" 
   3          #include <string.h>
   4          #include <stdio.h>
   5          
   6          #define THIS_ENDP0_SIZE         DEFAULT_ENDP0_SIZE
   7          #define CapsLockLED 0x02
   8          UINT8 Ep0Buffer[8 > (THIS_ENDP0_SIZE + 2) ? 8 : (THIS_ENDP0_SIZE + 2)];         // Endpoint 0 buffer
   9          UINT8 Ep1Buffer[64 > (MAX_PACKET_SIZE + 2) ? 64 : (MAX_PACKET_SIZE + 2)];       // Endpoint 1 buffer
  10          UINT8   SetupReq,SetupLen,Ready,Count,FLAG,UsbConfig,LED_VALID;
  11          PUINT8  pDescr;                                                                 //USB descriptor
  12          USB_SETUP_REQ   SetupReqBuf;
  13          #define UsbSetupBuf     ((PUSB_SETUP_REQ)Ep0Buffer)
  14          
  15          #define BUFMAX 8
  16          
  17          UINT8 HIDKey[BUFMAX] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // HID key buffer
  18          
  19          void USBDeviceInit();
  20          void Enp1IntIn();
  21          
  22          // HID Keycodes
  23          #define KEY_CTRL  0x01
  24          #define KEY_ALT   0x04
  25          #define KEY_DEL   0x4C
  26          #define KEY_TAB   0x2B
  27          #define KEY_A     0x04
  28          #define KEY_DELETE 0x4C
  29          
  30          // Function to send a key combination
  31          void SendKeyCombo(UINT8 modifier, UINT8 key) {
  32   1          HIDKey[0] = modifier; // Modifier keys (e.g., Ctrl, Alt)
  33   1          HIDKey[2] = key;      // Main key
  34   1          Enp1IntIn();          // Send the key press
  35   1          HIDKey[0] = 0x00;     // Release modifier
  36   1          HIDKey[2] = 0x00;     // Release key
  37   1          Enp1IntIn();          // Send the key release
  38   1      }
  39          
  40          // Function to send a string
  41          void SendString(const char *str) {
  42   1          while (*str) {
  43   2              HIDKey[2] = *str - 93; // Map ASCII to HID keycode (simplified for example)
  44   2              Enp1IntIn();           // Send key press
  45   2              HIDKey[2] = 0x00;      // Release key
  46   2              Enp1IntIn();           // Send key release
  47   2              str++;
  48   2          }
  49   1      }
  50          
  51          sbit  LED1 = P3^2;
  52          
  53          // Main function
  54          void main() {
C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/26/2025 17:55:40 PAGE 2   

  55   1          CfgFsys();       // Configure system clock
  56   1          mDelaymS(5);     // Small delay
  57   1          USBDeviceInit(); // Initialize USB device
  58   1      
  59   1          while (1) {
  60   2              // Make the LED on P3^2 blink
  61   2              LED1 = 1;
  62   2              mDelaymS(200);
  63   2      
  64   2              // Step 1: Press Ctrl + Alt + Del
  65   2              SendKeyCombo(KEY_CTRL | KEY_ALT, KEY_DEL);
  66   2      
  67   2              // Make the LED on P3^2 blink twice
  68   2              LED1 = 0;
  69   2              mDelaymS(200);
  70   2              LED1 = 1;
  71   2              mDelaymS(200);
  72   2              LED1 = 0;
  73   2              mDelaymS(200);
  74   2              LED1 = 1;
  75   2              mDelaymS(200);
  76   2      
  77   2              // Step 2: Type email "example@mail.com"
  78   2              SendString("example@mail.com");
  79   2      
  80   2              // Make the LED on P3^2 three times
  81   2              LED1 = 0;
  82   2              mDelaymS(200);
  83   2              LED1 = 1;
  84   2              mDelaymS(200);
  85   2              LED1 = 0;
  86   2              mDelaymS(200);
  87   2              LED1 = 1;
  88   2              mDelaymS(200);
  89   2              LED1 = 0;
  90   2              mDelaymS(200);
  91   2              LED1 = 1;
  92   2              mDelaymS(200);
  93   2      
  94   2              // Step 3: Press Tab
  95   2              SendKeyCombo(0x00, KEY_TAB);
  96   2      
  97   2              // Step 4: Type password "Secret"
  98   2              SendString("Secret");
  99   2      
 100   2              // Make the LED on P3^2 four times
 101   2              LED1 = 0;
 102   2              mDelaymS(200);
 103   2              LED1 = 1;
 104   2              mDelaymS(200);
 105   2              LED1 = 0;
 106   2              mDelaymS(200);
 107   2              LED1 = 1;
 108   2              mDelaymS(200);
 109   2              LED1 = 0;
 110   2              mDelaymS(200);
 111   2              LED1 = 1;
 112   2              mDelaymS(200);
 113   2              LED1 = 0;
 114   2              mDelaymS(200);
 115   2              LED1 = 1;
 116   2              mDelaymS(200);
C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/26/2025 17:55:40 PAGE 3   

 117   2      
 118   2              // Step 5: Wait 500ms
 119   2              mDelaymS(500);
 120   2      
 121   2              // Step 6: Press Ctrl + A
 122   2              SendKeyCombo(KEY_CTRL, KEY_A);
 123   2      
 124   2              // Step 7: Press Delete
 125   2              SendKeyCombo(0x00, KEY_DELETE);
 126   2      
 127   2              LED1 = 0;
 128   2              mDelaymS(500);
 129   2              LED1 = 1;
 130   2              mDelaymS(500);
 131   2              LED1 = 0;
 132   2      
 133   2              while (1); // Stop execution after completing the sequence
 134   2          }
 135   1      }
 136          
 137          // USB Device Initialization
 138          void USBDeviceInit() {
 139   1          // USB initialization code here
 140   1          IE_USB = 0;
 141   1          USB_CTRL = 0x00;                                                           // USB device mode
 142   1          UEP0_DMA = Ep0Buffer;                                                      // 0
 143   1          UEP1_DMA = Ep1Buffer;                                                      // 1
 144   1          UEP4_1_MOD = ~(bUEP4_RX_EN | bUEP4_TX_EN |bUEP1_RX_EN | bUEP1_BUF_MOD) | bUEP4_TX_EN;   // 64-byte IN,
             - 0 OUT
 145   1          UEP0_CTRL = UEP_R_RES_ACK | UEP_T_RES_NAK;                                 //OUT ACK IN NAK
 146   1          UEP1_CTRL = bUEP_T_TOG | UEP_T_RES_NAK;
 147   1              
 148   1          USB_DEV_AD = 0x00;
 149   1          UDEV_CTRL = bUD_PD_DIS;                                                    // DP/DM pull-up disable
 150   1          USB_CTRL = bUC_DEV_PU_EN | bUC_INT_BUSY | bUC_DMA_EN;                      // USB DMA interrupt enable
             - and automatic NAK
 151   1          UDEV_CTRL |= bUD_PORT_EN;                                                  // USB port enable
 152   1          USB_INT_FG = 0xFF;                                                         // Clear interrupt flags
 153   1          USB_INT_EN = bUIE_SUSPEND | bUIE_TRANSFER | bUIE_BUS_RST;
 154   1          IE_USB = 1;
 155   1      }
 156          
 157          // USB Endpoint 1 Interrupt IN (Send HID data)
 158          void Enp1IntIn() {
 159   1          // Send HIDKey buffer to the host
 160   1          memcpy( Ep1Buffer, HIDKey, sizeof(HIDKey));                              //ï¿½ï¿½ï¿½ï¿½ï¿½Ï´ï¿½ï¿½ï¿½ï
             -¿½ï¿½
 161   1          UEP1_T_LEN = sizeof(HIDKey);                                             //ï¿½Ï´ï¿½ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿
             -½
 162   1          UEP1_CTRL = UEP1_CTRL & ~ MASK_UEP_T_RES | UEP_T_RES_ACK;                //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½Ï´ï¿
             -½ï¿½ï¿½ï¿½Ý²ï¿½Ó¦ï¿½ï¿½ACK
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    391    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =    102       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.7.0   KEYBOARD                                                          03/26/2025 17:55:40 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
